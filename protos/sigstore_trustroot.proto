// Copyright 2022 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package dev.sigstore.trustroot.v1;

import "sigstore_common.proto";

option go_package = "github.com/sigstore/protobuf-specs/gen/pb-go/trustroot/v1";
option java_package = "dev.sigstore.proto.trustroot.v1";
option java_multiple_files = true;
option java_outer_classname = "TrustRootProto";

// TransparencyLogInstance describes the immutable parameters from a
// transparency log.
// See https://www.rfc-editor.org/rfc/rfc9162.html#name-log-parameters
// for more details.
// The incluced parameters are the minimal set required to identify a log,
// and verify an inclusion promise.
message TransparencyLogInstance {
        // The base URL at which can be used to URLs for the client.
        string base_url = 1;
        // The hash algorithm used for the Merkle Tree.
        dev.sigstore.common.v1.HashAlgorithm hash_algorithm = 2;
        // The public key used to verify signatures generated by the log.
        // This attribute contains the signature algorithm used by the log.
        dev.sigstore.common.v1.PublicKey public_key = 3;
        // The unique identifier for this transparency log.
        dev.sigstore.common.v1.LogId log_id = 4;
}

// CertificateAuthority enlists the information required to identify which
// CA to use and perform signature verification.
message CertificateAuthority {
        // The root certificate MUST be self-signed, and so the subject and
        // issuer are the same.
        dev.sigstore.common.v1.DistinguishedName subject = 1;
        // The URI at which the CA can be accessed.
        string uri = 2;
        // The certificate chain for this CA.
        dev.sigstore.common.v1.X509CertificateChain cert_chain = 3;
        // The time the *entire* chain was valid. This is at max the
        // longest interval when *all* certificates in the chain were valid,
        // but it MAY be shorter.
        dev.sigstore.common.v1.TimeRange valid_for = 4;
}

// TrustedRoot describes the client's complete set of trusted entities.
// How the TrustedRoot is populated is not specified, but can be a
// combination of many sources such as TUF repositories, files on disk etc.
//
// The TrustedRoot is not meant to be used for any artifact verification, only
// to capture the complete/global set of trusted verification materials.
// When verifying an artifact, based on the artifact and policies, a selection
// of keys/authorities are expected to be extracted and provided to the
// verification function. This way the set of keys/authorities kan be kept to
// a minimal set by the policy to gain better control over what signatures
// that are allowed.
message TrustedRoot {
        // A set of trusted Rekor servers.
        repeated TransparencyLogInstance tlogs = 1;
        // A set of trusted certificate authorites (e.g Fulcio), and any
        // intermediate certificates they provide.
        // If a CA is issuing multiple intermediate certificate, each
        // combination shall be represented as separate chain. I.e, a single
        // root cert may appear in multiple chains but with different
        // intermediate and/or leaf certificates.
        // The certificates are intended to be used for verifying artifact
        // signatures.
        repeated CertificateAuthority certificate_authorities = 2;
        // A set of trusted certificate transparency logs.
        repeated TransparencyLogInstance ctlogs = 3;
        // A set of trusted timestamping authorities.
        repeated CertificateAuthority timestamp_authorities = 4;
}

// TransparencyLogIdentifier contains information that can be used to
// identify a `TransparencyLogInstance`, either by its log id or its base_uri.
message TransparencyLogIdentifier {
        oneof id {
                // The log id of the transparency log.
                dev.sigstore.common.v1.LogId log_id = 1;
                // The base_uri for the transparency log.
                string uri = 2;
        }
}

// CertificateAuthorityIdentifier contains information that can be used to
// identify a `CertificateAuthority`, either by its subject or by its uri.
message CertificateAuthorityIdentifier {
        oneof id {
                // The subject of the certificate authority.
                dev.sigstore.common.v1.DistinguishedName subject = 1;
                // The uri of the certificate authority.
                string uri = 2;
        }
}

// Environment acts a selector to filter down a trust root to a smaller one.
// A policy should reference an environment, or embed one that can be used
// during artifact verification to filter the global trust root into a one
// only containing the relevant instances. An environment does not take
// temporality into account when selecting the instances from a trust root.
// Prior to performing verification the temporal aspect should be further
// examined to reduce the set of instances.
message Environment {
        // The name of the environment.
        string name = 1;
        // Ids for artifact signature transparency log to include.
        repeated TransparencyLogIdentifier tlog = 2;
        // Ids for certificate authorities to include.
        repeated CertificateAuthorityIdentifier cas = 3;
        // Ids for certificate transparency logs to include.
        repeated TransparencyLogIdentifier ctlogs = 4;
        // Ids for timestamp authorities to include.
        repeated CertificateAuthorityIdentifier tsas = 5;
}
